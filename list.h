#ifndef LST_LIST_H
#define LST_LIST_H

#include <stddef.h>

/*  Тип элементов в списке.

    Пользователь библиотеки может определить какой тип элементов будет в
    списке. Для этого нужно перед включенимем этого заголовочного файла
    определить макрос LST_MY_ELEM_T и тип lst_elem_t, а также перекомпилировать
    реализацию всех функций.

    Если пользователь не определит макрос перед включением заголовка, то по
    умолчанию будет использоваться void*.
*/
#ifndef LST_MY_ELEM_T
    typedef void* lst_elem_t;
#endif

/*  Звено двунаправленного списка с заглавным звеном.

    Содержит как сам элемент, так и указатели на предыдущее и следующее звенья.
    В инициализированном списке всегда находится одно первое звено, которое не
    меняет своего места. Все операции происходять после него. Поле elem у этого
    звена не используется.
*/
struct lst_node_ {
    lst_elem_t elems[10];
    size_t count;
    struct lst_node_* prev;
    struct lst_node_* next;
};

/*  Список.

    Тип предназначен для унификации пользовательского интерфейса библиотеки.
*/
typedef struct lst_node_* list_t;

/*  Итератор. Указывает на очередной элемент списка или на элемент, следующий
    за последним.

    Данный итератор является двунаправленным итератором чтения/записи. Это
    означает, что элемент, на который указывает итератор, можно прочитать,
    изменить, а также можно перейти к следующему и предыдущему элементу.

    Не стоит путать list_t и lst_iter_t. Первое — это контейнер, а второе —
    указатель на элемент в этом контейнере.
*/
typedef struct {
    /* указатель на звено */
    struct lst_node_* box;
    /* Номер элемента */
    size_t offset;  
} lst_iter_t;

#endif  /* LST_LIST_H */
